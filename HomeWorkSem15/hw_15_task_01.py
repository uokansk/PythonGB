# üìå –í–æ–∑—å–º–∏—Ç–µ –ª—é–±—ã–µ 1-3 –∑–∞–¥–∞—á–∏ –∏–∑ –ø—Ä–æ—à–ª—ã—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π.
# –î–æ–±–∞–≤—å—Ç–µ –∫ –Ω–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –∏ –ø–æ–ª–µ–∑–Ω–æ–π
# –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –¢–∞–∫–∂–µ —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞ –∏–∑
# –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
import csv
import logging
import argparse

logging.basicConfig(filename='e_student.log.', encoding='utf-8', level=logging.ERROR)


def parse():
    parser = argparse.ArgumentParser(prog='Student',
                                     description='–í–≤–æ–¥–∏–º –æ—Ü–µ–Ω–∫–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞–º')

    parser.add_argument('-f', '--family', help='–§–∞–º–∏–ª–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞')
    parser.add_argument('-n', '--name', help='–ò–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞')
    parser.add_argument('-s', '--surname', help='–û—Ç—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–∞')
    parser.add_argument('-—Å', '--csv_file', help='–°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤')
    args = parser.parse_args()
    stud_1 = Student(args.family, args.name, args.surname, args.csv_file)
    print(stud_1.add_grade('–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', 5))

    # return Student(f'{args.family} {args.name} {args.surname} {args.csv_file}')


class MyException(Exception):
    pass


class InvalidNameError(MyException):

    def __init__(self, message="–§–ò–û —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ. –û–Ω–æ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã "
                               "–∏ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã."):
        self.message = message
        super().__init__(self.message)


class SubjectError(MyException):
    def __init__(self, subject_name):
        self.message = f"–ü—Ä–µ–¥–º–µ—Ç '{subject_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ CSV."
        super().__init__(self.message)


class ScoreError(MyException):
    def __init__(self, score, score_type="–û—Ü–µ–Ω–∫–∞"):
        self.message = f"{score_type} '{score}' –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –û—Ü–µ–Ω–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 2 –¥–æ 5, " \
                       f"–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –æ—Ç 0 –¥–æ 100."
        super().__init__(self.message)


class Student:
    def __init__(self, family, name, surname, csv_file):
        try:
            self.family = family
            self.name = name
            self.surname = surname
            self.subjects = self.load_subjects(csv_file)

            if not name.istitle() or not name.replace(" ", "").isalpha() \
                    or not family.istitle() or not family.replace(" ", "").isalpha() \
                    or not surname.istitle() or not surname.replace(" ", "").isalpha():
                raise InvalidNameError()
        except InvalidNameError:
            logging.error(f'–§–ò–û —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ {family} {name} {surname}')

    def load_subjects(self, csv_file):
        with open(csv_file, 'r', newline='') as f:
            reader = csv.reader(f)
            return next(reader)
            # self.subjects = {row[0]: {"grades": [], "test_scores": []} for row in reader}

    def add_grade(self, subject, grade):
        try:
            if subject not in self.subjects:
                raise SubjectError(subject)
            if grade < 2 or grade > 5:
                raise ScoreError(grade)
        except ScoreError:
            logging.error(f' {subject} –ü—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –∏–ª–∏ —Ç–∞–∫–æ–π –æ—Ü–µ–Ω–∫–∏ –Ω–µ—Ç {grade} ')
            self.subjects[subject]["grades"].append(grade)

    def add_test_score(self, subject, score):
        try:
            if subject not in self.subjects:
                raise SubjectError(subject)
            if score < 0 or score > 100:
                raise ScoreError(score)
        except ScoreError:
            logging.error(f' {subject} –ü—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –∏–ª–∏ —Ç–∞–∫–æ–π –æ—Ü–µ–Ω–∫–∏ –Ω–µ—Ç {score} ')
            self.subjects[subject]["test_scores"].append(score)

    def average_test_score(self):
        scores = [score for subj in self.subjects.values() for score in subj["test_scores"]]
        return sum(scores) / len(scores) if scores else 0

    def average_grade(self):
        total_grades = [grade for subj in self.subjects.values() for grade in subj["grades"]]
        return sum(total_grades) / len(total_grades) if total_grades else 0


if __name__ == '__main__':
    # stud_1 = Student('Ivanov', 'Ivan', 'Ivanovuch', 'subjects.csv')
    # stud_1.add_grade('–∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫', 6)
    # stud_1.add_grade('–±–∏–æ–ª–æ–≥', 2)
    # stud_1.add_test_score('–±–∏–æ–ª–æ–≥–∏—è', 78)
    # print(stud_1.average_grade())
    print(parse())
