# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ5
# üìå –î–æ—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É 4.
# üìå –î–æ–±–∞–≤—å—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.
# üìå –ü—Ä–∏ —ç—Ç–æ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ª—é–±–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –º–æ–∂–Ω–æ –æ–ø—É—Å—Ç–∏—Ç—å. –í
# —ç—Ç–æ–º —Å–ª—É—á–∞–µ –±–µ—Ä—ë—Ç—Å—è –ø–µ—Ä–≤—ã–π –≤ –º–µ—Å—è—Ü–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, —Ç–µ–∫—É—â–∏–π
# –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏/–∏–ª–∏ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü.
# üìå *–ù–∞—É—á–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
# –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –∏ –º–µ—Å—è—Ü–∞, –Ω–æ –∏ —á–∏—Å–ª–æ–≤—ã–µ, —Ç.–µ –Ω–µ –º–∞—è, –∞ 5.


from datetime import datetime
import logging
import argparse

logging.basicConfig(filename='task_04.log', encoding='utf-8', level=logging.ERROR)
logger = logging.getLogger(__name__)
WEEK_DAYS = ('–ø–æ–Ω', '–≤—Ç–æ', '—Å—Ä–µ', '—á–µ—Ç', '–ø—è—Ç', '—Å—É–±', '–≤–æ—Å',)
MONTHS = ('—è–Ω–≤', '—Ñ–µ–≤', '–º–∞—Ä', '–∞–ø—Ä', '–º–∞–π', '–∏—é–Ω', '–∏—é–ª', '–∞–≤–≥', '—Å–µ–Ω', '–æ–∫—Ç', '–Ω–æ—è', '–¥–µ–∫',)


def parse():
    parser = argparse.ArgumentParser(prog='get_data',
                                     description='–ò—â–µ–º –¥–µ–Ω—å',
                                     epilog='get_data("3-—è —Å—Ä–µ–¥–∞ –º–∞—è")')

    parser.add_argument('-c', '--count', default=1, help='–ö–∞–∫–æ–π –ø–æ —Å—á–µ—Ç—É –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏')
    parser.add_argument('-w', '--week_day', default=datetime.now().weekday(), help='–ù–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏')
    parser.add_argument('-m', '--month', default=datetime.now().month, help='–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞')
    args = parser.parse_args()
    return get_data(f'{args.count} {args.week_day} {args.month}')


def get_data(data: str) -> datetime:
    try:
        count, week_day, month = data.split()
    except ValueError:
        logger.error(f'–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –¥–≤–Ω–Ω—ã—Ö {data}')
        return None
    # new_count, _ = count.split('-')
    # new_count = int(new_count)
    # –∞ –ª—É—á—à–µ:
    count = int(count[0])
    week_day = WEEK_DAYS.index(week_day[:3])
    month = MONTHS.index(month[:3]) + 1
    i = 0
    for day in range(1, 32):
        data = datetime(day=day, month=month, year=datetime.now().year)
        if data.weekday() == week_day:
            i += 1
            if i == count:
                return data

    print(count, type(count), week_day, type(week_day), month)


if __name__ == '__main__':
    print(parse())
