# –ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:
# ‚óã –ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–π –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—è
# ‚óã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è csv —Ñ–∞–π–ª–∞ —Å —Ç—Ä–µ–º—è —Å–ª—É—á–∞–π–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏ –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ. 100-1000 —Å—Ç—Ä–æ–∫.
# ‚óã –î–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∑–∞–ø—É—Å–∫–∞—é—â–∏–π —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –∫–æ—Ä–Ω–µ–π –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –∫–∞–∂–¥–æ–π —Ç—Ä–æ–π–∫–æ–π —á–∏—Å–µ–ª –∏–∑ csv —Ñ–∞–π–ª–∞.
# ‚óã –î–µ–∫–æ—Ä–∞—Ç–æ—Ä, —Å–æ—Ö—Ä–∞–Ω—è—é—â–∏–π –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ –≤ json —Ñ–∞–π–ª.
# üìå –°–æ–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç —Å –∏–≥—Ä–∞–º–∏ –∏–∑ —Ç–µ—Ö —Ñ–∞–π–ª–æ–≤, —á—Ç–æ —É–∂–µ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã –≤ —Ä–∞–º–∫–∞—Ö –∫—É—Ä—Å–∞
import csv
import functools
import random


def quadratic_equation(line):
    a, b, c = map(int, line)
    if a == 0:
        print(f'None: a = 0')
    discriminant = pow(b, 2) - 4 * a * c
    if discriminant < 0:
        print(f'Not root')
    elif discriminant == 0:
        x = -b / (2 * a)
        print(f'one root {x}')
    else:
        x1 = (-b + pow(discriminant, 0.5)) / (2 * a)
        x2 = (-b - pow(discriminant, 0.5)) / (2 * a)
        answer = x1, x2
        print(f'two root {answer}')


def generate_csv_file(file_name):
    count_num = 3
    # count_str = random.randint(100, 1000)
    count_str = 5
    with open(file_name, "w", newline="") as file:
        for _ in range(count_str):
            writer = csv.writer(file)
            writer.writerow([random.randint(-10, 10) for _ in range(count_num)])


def read_data_scv(file_name):
    with open(file_name, 'r', newline='') as f:
        csv_file = csv.reader(f)
        for line in csv_file:
            return line





name_file = "number.csv"
generate_csv_file(name_file)
print(quadratic_equation(read_data_scv(name_file)))
